# sign_my_pdf.py
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PyPDF2 import PdfReader, PdfWriter
from datetime import datetime
from pyhanko.sign import signers
from pyhanko.sign.fields import SigFieldSpec
from pyhanko.sign.signers.pdf_signer import PdfSignatureMetadata
from pyhanko.pdf_utils.incremental_writer import IncrementalPdfFileWriter
from pyhanko.sign.timestamps import HTTPTimeStamper
from pyhanko_certvalidator.context import ValidationContext
from pyhanko.sign.validation import validate_pdf_signature
from asn1crypto import x509
import base64
import os
import sys

# ===================== C·∫§U H√åNH =====================
PDF_INPUT = "chukiso.pdf"
PDF_TEMP = "chukiso_temp.pdf"
PDF_OUTPUT = "signed_output.pdf"
SIGN_IMAGE = "signature.png"
PRIVATE_KEY = "mykey.pem"
CERT_FILE = "mycert.pem"
NAME = "Nguy·ªÖn Tu·∫•n Anh"
PHONE = "0919668434"
FONT_FILE = r"C:\Windows\Fonts\times.ttf"
FONT_NAME = "TimesNewRoman"
TSA_URL = "http://timestamp.digicert.com"
KEY_PASSPHRASE = None

# ===================== ƒêƒÇNG K√ù FONT =====================
try:
    pdfmetrics.registerFont(TTFont(FONT_NAME, FONT_FILE))
except Exception as e:
    print("‚ö†Ô∏è Kh√¥ng load ƒë∆∞·ª£c font, d√πng font m·∫∑c ƒë·ªãnh. L·ªói:", e)

# ===================== B∆Ø·ªöC 1: CH√àN ·∫¢NH + TH√îNG TIN =====================
overlay_path = "overlay.pdf"
c = canvas.Canvas(overlay_path, pagesize=A4)

img_x, img_y, img_w, img_h = 350, 300, 150, 70
if not os.path.exists(SIGN_IMAGE):
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh ch·ªØ k√Ω: {SIGN_IMAGE}")
    sys.exit(1)

c.drawImage(SIGN_IMAGE, img_x, img_y, width=img_w, height=img_h)
c.setFont(FONT_NAME if FONT_NAME in pdfmetrics.getRegisteredFontNames() else "Helvetica", 10)
text_x, text_y = img_x, img_y - 15
c.drawString(text_x, text_y, f"Ng∆∞·ªùi k√Ω: {NAME}")
c.drawString(text_x, text_y - 12, f"SƒêT: {PHONE}")
c.drawString(text_x, text_y - 24, f"Ng√†y k√Ω: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
c.save()
print("‚úÖ ƒê√£ ch√®n ·∫£nh ch·ªØ k√Ω v√† th√¥ng tin v√†o overlay.pdf")

# ===================== B∆Ø·ªöC 2: GH√âP OVERLAY V√ÄO PDF G·ªêC =====================
if not os.path.exists(PDF_INPUT):
    print(f"‚ùå Kh√¥ng t√¨m th·∫•y file PDF g·ªëc: {PDF_INPUT}")
    sys.exit(1)

reader = PdfReader(PDF_INPUT)
writer = PdfWriter()
overlay = PdfReader(overlay_path)
overlay_page = overlay.pages[0]
for page in reader.pages:
    page.merge_page(overlay_page)
    writer.add_page(page)

with open(PDF_TEMP, "wb") as f_out:
    writer.write(f_out)
print("‚úÖ ƒê√£ g·ªôp overlay v√†o file PDF t·∫°m:", PDF_TEMP)

# ===================== B∆Ø·ªöC 3: T·∫†O SIGNER =====================
if not os.path.exists(PRIVATE_KEY) or not os.path.exists(CERT_FILE):
    print("‚ùå Thi·∫øu file private key ho·∫∑c certificate!")
    sys.exit(1)

try:
    signer = signers.SimpleSigner.load(
        key_file=PRIVATE_KEY,
        cert_file=CERT_FILE,
        ca_chain_files=None,
        key_passphrase=KEY_PASSPHRASE
    )
except Exception as e:
    print("‚ùå Kh√¥ng th·ªÉ load private key / certificate. L·ªói:", e)
    sys.exit(1)

# ===================== B∆Ø·ªöC 4: TSA + ValidationContext =====================
try:
    timestamper = HTTPTimeStamper(TSA_URL)
except Exception as e:
    print("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi TSA:", e)
    timestamper = None

# Load certificate PEM -> asn1crypto.x509.Certificate
vc = None
try:
    with open(CERT_FILE, 'rb') as f:
        cert_data = f.read()
        if b"-----BEGIN" in cert_data:
            cert_data = b"".join(line for line in cert_data.splitlines() if not line.startswith(b"-----"))
            cert_data = base64.b64decode(cert_data)
        cert_obj = x509.Certificate.load(cert_data)
    vc = ValidationContext(trust_roots=[cert_obj])
    print("‚úÖ ValidationContext created from CERT_FILE.")
except Exception as e:
    print("‚ö†Ô∏è Kh√¥ng t·∫°o ƒë∆∞·ª£c ValidationContext t·ª´ CERT_FILE:", e)
    # vc v·∫´n c√≥ th·ªÉ l√† None; script s·∫Ω c·ªë g·∫Øng k√Ω nh∆∞ng kh√¥ng nh√∫ng validation info

# ===================== B∆Ø·ªöC 5: C·∫§U H√åNH TH√îNG TIN K√ù =====================
# IMPORTANT: embed_validation_info=False ƒë·ªÉ tr√°nh b·∫Øt bu·ªôc ph·∫£i c√≥ ValidationContext
meta = PdfSignatureMetadata(
    field_name="Signature1",
    reason="Ph√™ duy·ªát b√°o c√°o nh√¢n s·ª±",
    location="ƒê·∫°i h·ªçc K·ªπ thu·∫≠t C√¥ng nghi·ªáp - TNUT",
    md_algorithm="sha256",
    use_pades_lta=True,        # mu·ªën PAdES-LTA n·∫øu c√≥ th·ªÉ
    embed_validation_info=False  # ƒê·∫∂T FALSE: tr√°nh l·ªói "must provide validation context"
)

# ===================== B∆Ø·ªöC 6: K√ù PDF =====================
try:
    with open(PDF_TEMP, "rb") as pdf_in:
        pdf_writer = IncrementalPdfFileWriter(pdf_in)
        pdf_signer = signers.PdfSigner(
            signature_meta=meta,
            signer=signer,
            timestamper=timestamper,
            new_field_spec=SigFieldSpec(sig_field_name="Signature1")
        )

        signed_stream = pdf_signer.sign_pdf(pdf_writer)

        # N·∫øu c√≥ th·ªÉ, c·ªë g·∫Øng nh√∫ng validation info sau khi k√Ω
        # (m·ªôt s·ªë phi√™n b·∫£n pyHanko cung c·∫•p embed_validation_info)
        try:
            from pyhanko.sign.validation import embed_validation_info as _embed_vi
            if vc is not None:
                try:
                    _embed_vi(signed_stream, validation_context=vc)
                    print("‚úÖ ƒê√£ nh√∫ng validation info (OCSP/CRL) b·∫±ng embed_validation_info().")
                except Exception as sub_e:
                    print("‚ö†Ô∏è Kh√¥ng th·ªÉ nh√∫ng validation info d√π c√≥ h√†m embed_validation_info():", sub_e)
            else:
                print("‚ö†Ô∏è embed_validation_info c√≥ s·∫µn nh∆∞ng ValidationContext kh√¥ng h·ª£p l·ªá ‚Äî b·ªè qua nh√∫ng.")
        except ImportError:
            # H√†m embed_validation_info kh√¥ng t·ªìn t·∫°i trong phi√™n b·∫£n pyHanko hi·ªán t·∫°i
            print("‚ö†Ô∏è H√†m embed_validation_info kh√¥ng c√≥ trong pyHanko n√†y ‚Äî b·ªè qua nh√∫ng validation info.")
        except Exception as e:
            print("‚ö†Ô∏è L·ªói khi c·ªë g·∫Øng import/embed validation info:", e)

        # Ghi file ƒë·∫ßu ra
        with open(PDF_OUTPUT, "wb") as f_out:
            f_out.write(signed_stream.getbuffer())

    print("‚úÖ ƒê√£ k√Ω s·ªë th√†nh c√¥ng! File ƒë·∫ßu ra:", PDF_OUTPUT)

except Exception as e:
    print("‚ùå L·ªói khi k√Ω PDF:", e)
    sys.exit(1)

# ===================== B∆Ø·ªöC 7: KI·ªÇM TRA CH·ªÆ K√ù =====================
try:
    with open(PDF_OUTPUT, "rb") as f:
        validation = validate_pdf_signature(f)
        print("\nüîç K·∫øt qu·∫£ x√°c th·ª±c ch·ªØ k√Ω:")
        print(validation.summary())
except Exception as e:
    print("‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c th·ª±c ch·ªØ k√Ω:", e)

# ===================== D·ªåN D·∫∏P FILE T·∫†M =====================
try:
    os.remove(overlay_path)
    os.remove(PDF_TEMP)
except Exception:
    pass

print("\nüéâ Ho√†n t·∫•t! File PDF ƒë√£ k√Ω s·ªë:", PDF_OUTPUT)
